# tsa

*Guard your REST API with a bit of fascism.*

TSA is a node.js library designed to take JSON input and:
* filter it against a whitelist
* validate it
* transform it
* provide default values

It has been designed with usage in an Express-based JSON REST API in mind, and allows you to easily pass it into your route as middleware.

## Installation

```bash
$ npm install tsa
```

## Usage

### Using TSA Directly

Create a guard:

```javascript
var tsa = require('tsa');
var guard = tsa({
    property1: tsa.required()
  , property2: tsa.optional()
  , property3: tsa.default('blah')
});
```

Validate input against guard:

```javascript
var input = {
    property1: 'foo'
  , property4: 'bar'
};
guard.frisk(input, function(err, result){
  // err === null
  // result.property1 === 'foo'
  // result.property2 === undefined
  // result.property3 === 'blah'
  // result.property4 === undefined
});
```

### Using TSA Via Express Middleware

Create a guard:

```javascript
var tsa = require('tsa');
var guard = tsa({
    property1: tsa.required()
  , property2: tsa.optional()
});
```

Ensure you're using express's body parser:

```javascript
app.use(express.bodyParser());
```

Add that guard's middleware to your route:

```javascript
app.post('/foo', guard.middleware(), function(req, res){
  // req.body is the whitelisted, validated, transformed version of the input from req.body
});

app.error(function(err, req, res, next){
  // err is an array of errors generated by the guard
});
```

Alternatively you can handle the errors on a per-route basis instead of globally:

```javascript
app.post('/foo', guard.middleware(function(err, req, res, next){
  // return a 400, show an error page, ignore by calling next, whatever
}), function(req, res){
  // req.body is the whitelisted, validated, transformed version of the input from req.body
});
```

## Creating Guards

### Nested Guards

```javascript
var tsa = require('tsa');
var address = tsa({
    street1: tsa.required()
  , street2: tsa.optional()
});
var person = tsa({
    name: tsa.required()
  , address: address
});
```

### Required Fields

```javascript
var tsa = require('tsa');
var guard = tsa({
  property1: tsa.field({ required: true }) // or: tsa.required()
});
var input = {};
guard.frisk(input, function(err, result){
  // err === instanceof Array
  // err[0] === {key: 'property1', error: 'required field property1 not supplied'}
});
```

### Optional Fields

```javascript
var tsa = require('tsa');
var guard = tsa({
  property1: tsa.field() // or: tsa.optional()
});
var input = {};
guard.frisk(input, function(err, result){
  // err === null
  // result === {}
});
```

### Whitelisting

```javascript
var tsa = require('tsa');
var guard = tsa({
  property1: tsa.required()
});
var input = {
    property1: 'foo'
  , property2: 'bar'
};
guard.frisk(input, function(err, result){
  // result.property1 === 'foo'
  // result has no property2 key
});
```

### Custom Validations

```javascript
var tsa = require('tsa');
var mustBeUpper = function(input, cb){
  if(input.toUpperCase() === input){
    cb(); // yes, this is uppercase
  }else{
    cb('not uppercase!'); // oh noes!
  }
};
var guard = tsa({
  foo: tsa.field({ validate: mustBeUpper }) // or: tsa.validate(mustBeUpper)
});
var input = { foo: 'bar' };
guard.frisk(input, function(err, result){
  // err[0] === {key: 'foo', error: 'not uppercase!'}
  // result === null
});
```

### Default Values

```javascript
var tsa = require('tsa');
var guard = tsa({
  foo: tsa.field({ default: 'bar' }) // or: tsa.default('bar')
});
var input = {};
guard.frisk(input, function(err, result){
  // err === null
  // result.foo === 'bar'
});
```

Optionally, the default value can be a function which will be executed by tsa:

```javascript
var tsa = require('tsa');
var now = function(){
  return new Date();
};
var guard = tsa({
  foo: tsa.field({ default: now }) // or: tsa.default(now)
});
var input = {};
guard.frisk(input, function(err, result){
  // err === null
  // result.foo === a Date object
});
```

### Transformations

```javascript
var tsa = require('tsa');
var toUpper = function(input, cb){
  cb(null, input.toUpperCase());
};
var guard = tsa({
  foo: tsa.field({ transform: toUpper }) // or: tsa.transform(toUpper)
});
var input = { foo: 'bar' };
guard.frisk(input, function(err, result){
  // err === null
  // result.foo === 'BAR'
});
```

### Combinations

You can combine any and all of the above like so:

```javascript
var tsa = require('tsa');
var toUpper = function(input, cb){
  cb(null, input.toUpperCase());
};
var guard = tsa({
  foo: tsa.field({ required: true, transform: toUpper })
  // or: tsa.required({ transform: toUpper })
  // or: tsa.transform(toUpper, {required: true})
});
var input = { foo: 'bar' };
guard.frisk(input, function(err, result){
  // err === null
  // result.foo === 'BAR'
});
```

### Error Handling

Errors for nested structures are returned like so:

```json
[
    {key: 'first', error: 'Required field not provided.'}
  , {key: 'address', error: [
        {key: 'street1', error: 'Required field not provided.'}
      , {key: 'zip', error: 'Required field not provided.'}
    ]}
]
```

While this is a very structured format, it isn't always the easiest for
doing things like highlighting form fields that have errors. In those
situations you can pass the error structure into the `tsa.flattenErrors`
method to get back something like this:

```json
[
    {key: 'first', error: 'Required field not provided.'}
  , {key: 'address[street1]', error: 'Required field not provided.'}
  , {key: 'address[zip]', error: 'Required field not provided.'}
]
```

## Test

Run tests via mocha:

```bash
$ npm install -g mocha
$ git clone git://github.com/TroyGoode/node-tsa.git tsa
$ cd tsa/
$ npm install
$ mocha
```

Run example web app:

```bash
$ git clone git://github.com/TroyGoode/node-tsa.git tsa
$ cd tsa/
$ npm install
$ cd example/
$ npm install
$ npm start
$ open http://localhost:3000
```

## License

[MIT License](http://www.opensource.org/licenses/mit-license.php)

## Author

[Troy Goode](https://github.com/TroyGoode) ([troygoode@gmail.com](mailto:troygoode@gmail.com))
